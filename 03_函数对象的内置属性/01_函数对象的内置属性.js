/**
 * 本章节拓展函数对象内部的自带的属性：
 * 首先函数对象是什么？
 * 我们在之前的章节已经介绍过： 函数对象 在当前执行上下文，声明阶段的函数声明处理会创建函数对象；
 */


/**
 * 0. 首先声明一个foo函数，和一个bar函数，用于下面的案例使用；
 */
function foo (x,y,z=10){};
function bar (...args){};


/**
 * 1. 对一个内置的关于作用域链：
 *      这是一个回顾回顾知识：会把函数对象的[[scope]]属性赋值为当前执行上下文的scopeChain属性的值；
 */


/**
 * 2. 既然是函数对象， 我们可以把它当作一个对象使用；
 *      我们将foo函数当作一个对象使用，给他添加一个自定义属性并且赋值并且打印
 */
foo.address ="武汉市";
console.log(foo.address);


/**
 * 3. 在第2点中讲的是我们给函数对象加了一个 我们自定的属性
 *    默认的函数对象有自己的属性：
 */

/**
 * 3.1 name属性 存储了获取函数的名称
 *     我们把函数放到数组遍历调用
 */
console.log(foo.name);
let fnArry=[foo,bar];
for (let fn of fnArry){
    console.log("当前函数：：",fn.name);
}


/**
 * 3.2 length属性，表示形式参数的个数；
 *      剩余参数...args ，不计算在内的；
 *      形参有默认值。，   不计算在内；
 */
console.log("foo函数需要接收的参数个数：",foo.length);
console.log("bar函数需要接收的参数个数：",bar.length);





/**
 * 3.2
 */

